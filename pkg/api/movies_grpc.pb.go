// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: pkg/proto/movies.proto

package movies_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Movies_GetMovies_FullMethodName = "/proto.Movies/GetMovies"
	Movies_BuyMovie_FullMethodName  = "/proto.Movies/BuyMovie"
	Movies_GetMovie_FullMethodName  = "/proto.Movies/GetMovie"
)

// MoviesClient is the client API for Movies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoviesClient interface {
	GetMovies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MoviesResponse, error)
	BuyMovie(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetMovie(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Movie], error)
}

type moviesClient struct {
	cc grpc.ClientConnInterface
}

func NewMoviesClient(cc grpc.ClientConnInterface) MoviesClient {
	return &moviesClient{cc}
}

func (c *moviesClient) GetMovies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoviesResponse)
	err := c.cc.Invoke(ctx, Movies_GetMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesClient) BuyMovie(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Movies_BuyMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesClient) GetMovie(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Movie], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Movies_ServiceDesc.Streams[0], Movies_GetMovie_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MovieRequest, Movie]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Movies_GetMovieClient = grpc.ServerStreamingClient[Movie]

// MoviesServer is the server API for Movies service.
// All implementations must embed UnimplementedMoviesServer
// for forward compatibility.
type MoviesServer interface {
	GetMovies(context.Context, *EmptyRequest) (*MoviesResponse, error)
	BuyMovie(context.Context, *MovieRequest) (*EmptyResponse, error)
	GetMovie(*MovieRequest, grpc.ServerStreamingServer[Movie]) error
	mustEmbedUnimplementedMoviesServer()
}

// UnimplementedMoviesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMoviesServer struct{}

func (UnimplementedMoviesServer) GetMovies(context.Context, *EmptyRequest) (*MoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (UnimplementedMoviesServer) BuyMovie(context.Context, *MovieRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyMovie not implemented")
}
func (UnimplementedMoviesServer) GetMovie(*MovieRequest, grpc.ServerStreamingServer[Movie]) error {
	return status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMoviesServer) mustEmbedUnimplementedMoviesServer() {}
func (UnimplementedMoviesServer) testEmbeddedByValue()                {}

// UnsafeMoviesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoviesServer will
// result in compilation errors.
type UnsafeMoviesServer interface {
	mustEmbedUnimplementedMoviesServer()
}

func RegisterMoviesServer(s grpc.ServiceRegistrar, srv MoviesServer) {
	// If the following call pancis, it indicates UnimplementedMoviesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Movies_ServiceDesc, srv)
}

func _Movies_GetMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServer).GetMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Movies_GetMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServer).GetMovies(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movies_BuyMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServer).BuyMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Movies_BuyMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServer).BuyMovie(ctx, req.(*MovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movies_GetMovie_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MovieRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MoviesServer).GetMovie(m, &grpc.GenericServerStream[MovieRequest, Movie]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Movies_GetMovieServer = grpc.ServerStreamingServer[Movie]

// Movies_ServiceDesc is the grpc.ServiceDesc for Movies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Movies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Movies",
	HandlerType: (*MoviesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovies",
			Handler:    _Movies_GetMovies_Handler,
		},
		{
			MethodName: "BuyMovie",
			Handler:    _Movies_BuyMovie_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMovie",
			Handler:       _Movies_GetMovie_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/movies.proto",
}
